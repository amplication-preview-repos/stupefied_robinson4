/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PodmanDeployment as PrismaPodmanDeployment,
  VirtualMachine as PrismaVirtualMachine,
} from "@prisma/client";

export class PodmanDeploymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PodmanDeploymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.podmanDeployment.count(args);
  }

  async podmanDeployments(
    args: Prisma.PodmanDeploymentFindManyArgs
  ): Promise<PrismaPodmanDeployment[]> {
    return this.prisma.podmanDeployment.findMany(args);
  }
  async podmanDeployment(
    args: Prisma.PodmanDeploymentFindUniqueArgs
  ): Promise<PrismaPodmanDeployment | null> {
    return this.prisma.podmanDeployment.findUnique(args);
  }
  async createPodmanDeployment(
    args: Prisma.PodmanDeploymentCreateArgs
  ): Promise<PrismaPodmanDeployment> {
    return this.prisma.podmanDeployment.create(args);
  }
  async updatePodmanDeployment(
    args: Prisma.PodmanDeploymentUpdateArgs
  ): Promise<PrismaPodmanDeployment> {
    return this.prisma.podmanDeployment.update(args);
  }
  async deletePodmanDeployment(
    args: Prisma.PodmanDeploymentDeleteArgs
  ): Promise<PrismaPodmanDeployment> {
    return this.prisma.podmanDeployment.delete(args);
  }

  async getVirtualMachine(
    parentId: string
  ): Promise<PrismaVirtualMachine | null> {
    return this.prisma.podmanDeployment
      .findUnique({
        where: { id: parentId },
      })
      .virtualMachine();
  }
}
