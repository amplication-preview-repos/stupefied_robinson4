/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PodmanDeploymentService } from "../podmanDeployment.service";
import { PodmanDeploymentCreateInput } from "./PodmanDeploymentCreateInput";
import { PodmanDeployment } from "./PodmanDeployment";
import { PodmanDeploymentFindManyArgs } from "./PodmanDeploymentFindManyArgs";
import { PodmanDeploymentWhereUniqueInput } from "./PodmanDeploymentWhereUniqueInput";
import { PodmanDeploymentUpdateInput } from "./PodmanDeploymentUpdateInput";

export class PodmanDeploymentControllerBase {
  constructor(protected readonly service: PodmanDeploymentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PodmanDeployment })
  async createPodmanDeployment(
    @common.Body() data: PodmanDeploymentCreateInput
  ): Promise<PodmanDeployment> {
    return await this.service.createPodmanDeployment({
      data: {
        ...data,

        virtualMachine: data.virtualMachine
          ? {
              connect: data.virtualMachine,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        deploymentName: true,
        id: true,
        status: true,
        updatedAt: true,

        virtualMachine: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PodmanDeployment] })
  @ApiNestedQuery(PodmanDeploymentFindManyArgs)
  async podmanDeployments(
    @common.Req() request: Request
  ): Promise<PodmanDeployment[]> {
    const args = plainToClass(PodmanDeploymentFindManyArgs, request.query);
    return this.service.podmanDeployments({
      ...args,
      select: {
        createdAt: true,
        deploymentName: true,
        id: true,
        status: true,
        updatedAt: true,

        virtualMachine: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PodmanDeployment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async podmanDeployment(
    @common.Param() params: PodmanDeploymentWhereUniqueInput
  ): Promise<PodmanDeployment | null> {
    const result = await this.service.podmanDeployment({
      where: params,
      select: {
        createdAt: true,
        deploymentName: true,
        id: true,
        status: true,
        updatedAt: true,

        virtualMachine: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PodmanDeployment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePodmanDeployment(
    @common.Param() params: PodmanDeploymentWhereUniqueInput,
    @common.Body() data: PodmanDeploymentUpdateInput
  ): Promise<PodmanDeployment | null> {
    try {
      return await this.service.updatePodmanDeployment({
        where: params,
        data: {
          ...data,

          virtualMachine: data.virtualMachine
            ? {
                connect: data.virtualMachine,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          deploymentName: true,
          id: true,
          status: true,
          updatedAt: true,

          virtualMachine: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PodmanDeployment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePodmanDeployment(
    @common.Param() params: PodmanDeploymentWhereUniqueInput
  ): Promise<PodmanDeployment | null> {
    try {
      return await this.service.deletePodmanDeployment({
        where: params,
        select: {
          createdAt: true,
          deploymentName: true,
          id: true,
          status: true,
          updatedAt: true,

          virtualMachine: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
