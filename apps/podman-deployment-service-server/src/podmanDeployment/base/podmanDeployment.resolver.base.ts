/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PodmanDeployment } from "./PodmanDeployment";
import { PodmanDeploymentCountArgs } from "./PodmanDeploymentCountArgs";
import { PodmanDeploymentFindManyArgs } from "./PodmanDeploymentFindManyArgs";
import { PodmanDeploymentFindUniqueArgs } from "./PodmanDeploymentFindUniqueArgs";
import { CreatePodmanDeploymentArgs } from "./CreatePodmanDeploymentArgs";
import { UpdatePodmanDeploymentArgs } from "./UpdatePodmanDeploymentArgs";
import { DeletePodmanDeploymentArgs } from "./DeletePodmanDeploymentArgs";
import { VirtualMachine } from "../../virtualMachine/base/VirtualMachine";
import { PodmanDeploymentService } from "../podmanDeployment.service";
@graphql.Resolver(() => PodmanDeployment)
export class PodmanDeploymentResolverBase {
  constructor(protected readonly service: PodmanDeploymentService) {}

  async _podmanDeploymentsMeta(
    @graphql.Args() args: PodmanDeploymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PodmanDeployment])
  async podmanDeployments(
    @graphql.Args() args: PodmanDeploymentFindManyArgs
  ): Promise<PodmanDeployment[]> {
    return this.service.podmanDeployments(args);
  }

  @graphql.Query(() => PodmanDeployment, { nullable: true })
  async podmanDeployment(
    @graphql.Args() args: PodmanDeploymentFindUniqueArgs
  ): Promise<PodmanDeployment | null> {
    const result = await this.service.podmanDeployment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PodmanDeployment)
  async createPodmanDeployment(
    @graphql.Args() args: CreatePodmanDeploymentArgs
  ): Promise<PodmanDeployment> {
    return await this.service.createPodmanDeployment({
      ...args,
      data: {
        ...args.data,

        virtualMachine: args.data.virtualMachine
          ? {
              connect: args.data.virtualMachine,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PodmanDeployment)
  async updatePodmanDeployment(
    @graphql.Args() args: UpdatePodmanDeploymentArgs
  ): Promise<PodmanDeployment | null> {
    try {
      return await this.service.updatePodmanDeployment({
        ...args,
        data: {
          ...args.data,

          virtualMachine: args.data.virtualMachine
            ? {
                connect: args.data.virtualMachine,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PodmanDeployment)
  async deletePodmanDeployment(
    @graphql.Args() args: DeletePodmanDeploymentArgs
  ): Promise<PodmanDeployment | null> {
    try {
      return await this.service.deletePodmanDeployment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => VirtualMachine, {
    nullable: true,
    name: "virtualMachine",
  })
  async getVirtualMachine(
    @graphql.Parent() parent: PodmanDeployment
  ): Promise<VirtualMachine | null> {
    const result = await this.service.getVirtualMachine(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
