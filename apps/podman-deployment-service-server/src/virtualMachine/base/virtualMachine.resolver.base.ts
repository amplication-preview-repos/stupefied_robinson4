/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VirtualMachine } from "./VirtualMachine";
import { VirtualMachineCountArgs } from "./VirtualMachineCountArgs";
import { VirtualMachineFindManyArgs } from "./VirtualMachineFindManyArgs";
import { VirtualMachineFindUniqueArgs } from "./VirtualMachineFindUniqueArgs";
import { CreateVirtualMachineArgs } from "./CreateVirtualMachineArgs";
import { UpdateVirtualMachineArgs } from "./UpdateVirtualMachineArgs";
import { DeleteVirtualMachineArgs } from "./DeleteVirtualMachineArgs";
import { PodmanDeploymentFindManyArgs } from "../../podmanDeployment/base/PodmanDeploymentFindManyArgs";
import { PodmanDeployment } from "../../podmanDeployment/base/PodmanDeployment";
import { VirtualMachineService } from "../virtualMachine.service";
@graphql.Resolver(() => VirtualMachine)
export class VirtualMachineResolverBase {
  constructor(protected readonly service: VirtualMachineService) {}

  async _virtualMachinesMeta(
    @graphql.Args() args: VirtualMachineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VirtualMachine])
  async virtualMachines(
    @graphql.Args() args: VirtualMachineFindManyArgs
  ): Promise<VirtualMachine[]> {
    return this.service.virtualMachines(args);
  }

  @graphql.Query(() => VirtualMachine, { nullable: true })
  async virtualMachine(
    @graphql.Args() args: VirtualMachineFindUniqueArgs
  ): Promise<VirtualMachine | null> {
    const result = await this.service.virtualMachine(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VirtualMachine)
  async createVirtualMachine(
    @graphql.Args() args: CreateVirtualMachineArgs
  ): Promise<VirtualMachine> {
    return await this.service.createVirtualMachine({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VirtualMachine)
  async updateVirtualMachine(
    @graphql.Args() args: UpdateVirtualMachineArgs
  ): Promise<VirtualMachine | null> {
    try {
      return await this.service.updateVirtualMachine({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VirtualMachine)
  async deleteVirtualMachine(
    @graphql.Args() args: DeleteVirtualMachineArgs
  ): Promise<VirtualMachine | null> {
    try {
      return await this.service.deleteVirtualMachine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PodmanDeployment], { name: "podmanDeployments" })
  async findPodmanDeployments(
    @graphql.Parent() parent: VirtualMachine,
    @graphql.Args() args: PodmanDeploymentFindManyArgs
  ): Promise<PodmanDeployment[]> {
    const results = await this.service.findPodmanDeployments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
