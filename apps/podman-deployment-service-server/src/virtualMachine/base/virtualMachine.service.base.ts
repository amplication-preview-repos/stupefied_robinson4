/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VirtualMachine as PrismaVirtualMachine,
  PodmanDeployment as PrismaPodmanDeployment,
} from "@prisma/client";

export class VirtualMachineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VirtualMachineCountArgs, "select">
  ): Promise<number> {
    return this.prisma.virtualMachine.count(args);
  }

  async virtualMachines(
    args: Prisma.VirtualMachineFindManyArgs
  ): Promise<PrismaVirtualMachine[]> {
    return this.prisma.virtualMachine.findMany(args);
  }
  async virtualMachine(
    args: Prisma.VirtualMachineFindUniqueArgs
  ): Promise<PrismaVirtualMachine | null> {
    return this.prisma.virtualMachine.findUnique(args);
  }
  async createVirtualMachine(
    args: Prisma.VirtualMachineCreateArgs
  ): Promise<PrismaVirtualMachine> {
    return this.prisma.virtualMachine.create(args);
  }
  async updateVirtualMachine(
    args: Prisma.VirtualMachineUpdateArgs
  ): Promise<PrismaVirtualMachine> {
    return this.prisma.virtualMachine.update(args);
  }
  async deleteVirtualMachine(
    args: Prisma.VirtualMachineDeleteArgs
  ): Promise<PrismaVirtualMachine> {
    return this.prisma.virtualMachine.delete(args);
  }

  async findPodmanDeployments(
    parentId: string,
    args: Prisma.PodmanDeploymentFindManyArgs
  ): Promise<PrismaPodmanDeployment[]> {
    return this.prisma.virtualMachine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .podmanDeployments(args);
  }
}
